{
    "order_food": {
        "code": "def order():\n    \"\"\"\n        order food in Xiangjiang Restaurant.\n\n        Args:\n        None\n\n        Returns:\n        None\n        \"\"\"\n    from selenium import webdriver\n    from selenium.webdriver.common.by import By\n    import time\n    driver = webdriver.Chrome()\n\n    driver.get(\"https://csd2.order.place/store/112841/mode/takeaway\")\n    time.sleep(3)\n    start = driver.find_element(By.CLASS_NAME, 'start-btn-box')\n    start.click()\n    for handle in driver.window_handles:\n        driver.switch_to.window(handle)\n    time.sleep(3)\n    choose = driver.find_element(By.XPATH,\n                                 '//*[@id=\"content\"]/category-list-page/ion-content/ion-grid/ion-row/ion-col[1]')\n    choose.click()\n\n    time.sleep(3)\n    add = driver.find_element(By.XPATH, '//*[@id=\"content\"]/item-grid-scroll-page/ion-content/div/div/div[1]')\n    add.click()\n\n    time.sleep(3)\n    addToOrder = driver.find_element(By.XPATH, '//*[@id=\"footer-box\"]/div[2]/div[2]')\n    addToOrder.click()\n    time.sleep(3)\n    bill = driver.find_element(By.XPATH, '//*[@id=\"content\"]/item-grid-scroll-page/ion-footer/ion-button')\n    bill.click()\n    time.sleep(19)\n\n\n",
        "description": "order food in Xiangjiang Restaurant"
    },
    "weather_forecast": {
        "code": "import requests\n\ndef get_weather_forecast():\n    \"\"\"\n        Get the current weather and 9-day weather forecast from the Hong Kong Observatory API.\n        Args:\n           None\n\n        Returns:\n           None\n    \"\"\"\n    api_url = \"https://data.weather.gov.hk/weatherAPI/opendata/weather.php\"\n    \n    forecast_params = {\n        'dataType': 'fnd',  \n        'lang': 'tc'  \n    }\n    \n    current_weather_params = {\n        'dataType': 'rhrread',  \n        'lang': 'tc'\n    }\n\n    forecast_response = requests.get(api_url, params=forecast_params)\n    current_weather_response = requests.get(api_url, params=current_weather_params)\n    \n    if forecast_response.status_code == 200 and current_weather_response.status_code == 200:\n        forecast_data = forecast_response.json()\n        current_weather_data = current_weather_response.json()\n\n        print(\"\u4e5d\u5929\u5929\u6c14\u9884\u62a5\uff1a\")\n        for day in forecast_data['weatherForecast']:\n            print(f\"\u65e5\u671f: {day['forecastDate']}\")\n            print(f\"\u5929\u6c14: {day['forecastWeather']}\")\n            print(f\"\u6700\u9ad8\u6e29\u5ea6: {day['forecastMaxtemp']['value']}\u00b0C\")\n            print(f\"\u6700\u4f4e\u6e29\u5ea6: {day['forecastMintemp']['value']}\u00b0C\")\n            print(f\"\u76f8\u5bf9\u6e7f\u5ea6: {day['forecastMaxrh']['value']}% - {day['forecastMinrh']['value']}%\")\n            print(f\"\u98ce\u901f: {day['forecastWind']}\")\n            print(\"--------------------\")\n\n        print(\"\u5f53\u524d\u5929\u6c14\uff1a\")\n        print(\"\u6e29\u5ea6\uff1a\", current_weather_data['temperature']['data'][0]['value'], \"\u00b0C\")\n        print(\"\u6e7f\u5ea6\uff1a\", current_weather_data['humidity']['data'][0]['value'], \"%\")\n        print(\"\u5929\u6c14\u60c5\u51b5\uff1a\", current_weather_data['icon'][0])\n\n    else:\n        print(\"\u65e0\u6cd5\u83b7\u53d6\u5929\u6c14\u6570\u636e\")\n\nget_weather_forecast()\n",
        "description": "Get the current weather and 9-day weather forecast from the Hong Kong Observatory API"
    },
    "email": {
        "code": "\ndef email():\n    \"\"\"\n        This function demonstrates how to authenticate with Gmail API, fetch unread emails, and send an email using Gmail API.\n\n        Args:\n          None\n\n        Returns:\n          None\n    \"\"\"\n    from google.oauth2.credentials import Credentials\n    from googleapiclient.discovery import build\n\n    # Authenticate and Build Gmail Service\n    def authenticate_gmail():\n        creds = Credentials.from_authorized_user_file('credentials.json',\n                                                      ['https://www.googleapis.com/auth/gmail.readonly',\n                                                       'https://www.googleapis.com/auth/gmail.send'])\n        service = build('gmail', 'v1', credentials=creds)\n        return service\n\n    # Fetch Emails\n    def fetch_emails(service, query=\"is:unread\"):\n        results = service.users().messages().list(userId='me', q=query).execute()\n        messages = results.get('messages', [])\n        email_list = []\n        for message in messages:\n            msg = service.users().messages().get(userId='me', id=message['id']).execute()\n            snippet = msg['snippet']\n            email_list.append({\n                'id': message['id'],\n                'snippet': snippet,\n            })\n        return email_list\n\n    # Compose and Send Email\n    def send_email(service, to, subject, body):\n        from email.mime.text import MIMEText\n        import base64\n\n        message = MIMEText(body)\n        message['to'] = to\n        message['subject'] = subject\n        raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode()\n        service.users().messages().send(userId='me', body={'raw': raw_message}).execute()\n\n    service = authenticate_gmail()\n    print(\"Fetching unread emails...\")\n    emails = fetch_emails(service)\n    for email in emails:\n        print(f\"Email Snippet: {email['snippet']}\")\n\n    print(\"Composing a new email...\")\n    send_email(service, \"recipient@example.com\", \"Test Subject\", \"This is a test email.\")\n",
        "description": "This function demonstrates how to authenticate with Gmail API, fetch unread emails, and send an email using Gmail API"
    },
    "deadline": {
        "code": "def deadline():\n    \"\"\"\n        Retrieve deadlines from the HKU Moodle calendar.\n\n        Args:\n        None\n\n        Returns:\n        None\n        \"\"\"\n    from selenium import webdriver\n    from selenium.webdriver.chrome.service import Service\n    from selenium.webdriver.chrome.options import Options\n    from selenium.webdriver.common.by import By\n    from selenium.webdriver.support.ui import WebDriverWait\n    from selenium.webdriver.support import expected_conditions as EC\n    from selenium.common.exceptions import TimeoutException\n\n    chrome_options = Options()\n    chrome_options.add_argument(\"user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36\")\n\n    driver = webdriver.Chrome(service=Service(), options=chrome_options)\n    driver.maximize_window()\n\n    wait = WebDriverWait(driver, 20)  # Wait for up to 20 seconds\n\n    driver.get(\"https://moodle.hku.hk/\")\n\n    try:\n        login_button = wait.until(EC.element_to_be_clickable((By.ID, \"btn-lambda-login\")))\n        login_button.click()\n    except TimeoutException:\n        print(\"Login button not found. Please check page load speed or selector accuracy.\")\n        return\n\n    try:\n        portal_login_button = wait.until(EC.element_to_be_clickable((By.PARTIAL_LINK_TEXT, \"HKU Portal user login\")))\n        portal_login_button.click()\n    except TimeoutException:\n        print(\"HKU Portal user login button not found. Please check page load speed or selector accuracy.\")\n        return\n\n    try:\n        email_field = wait.until(EC.presence_of_element_located((By.ID, \"email\")))\n        email_field.send_keys(\"u3641280@connect.hku.hk\")\n\n        login_button = driver.find_element(By.ID, \"login_btn\")\n        login_button.click()\n    except TimeoutException:\n        print(\"Email field or LOG IN button not found. Please check page load speed or selector accuracy.\")\n        return\n\n    try:\n        password_field = wait.until(EC.presence_of_element_located((By.ID, \"passwordInput\")))\n        password_field.send_keys(\"B5STbX2910\")\n\n        login_button = driver.find_element(By.ID, \"submitButton\")\n        login_button.click()\n    except TimeoutException:\n        print(\"Password field or submit button not found. Please check page load speed or selector accuracy.\")\n        return\n\n    try:\n        continue_button = wait.until(EC.element_to_be_clickable((By.ID, \"idSIButton9\")))\n        continue_button.click()\n    except TimeoutException:\n        print(\"Continue button not found. Please check page load speed or selector accuracy.\")\n        return\n\n    try:\n        yes_button = wait.until(EC.element_to_be_clickable((By.ID, \"idSIButton9\")))\n        yes_button.click()\n    except TimeoutException:\n        print(\"Yes button not found. Please check page load speed or selector accuracy.\")\n        return\n\n    try:\n        calendar_button = wait.until(EC.element_to_be_clickable((By.LINK_TEXT, \"Full calendar\")))\n        calendar_button.click()\n    except TimeoutException:\n        print(\"Full calendar button not found. Please check page load speed or selector accuracy.\")\n        return\n\n    try:\n        calendar = wait.until(EC.presence_of_element_located((By.CLASS_NAME, \"calendarwrapper\")))\n\n        event_days = driver.find_elements(By.CSS_SELECTOR, \"td.hasevent\")\n\n        deadlines = []\n\n        for day in event_days:\n            date = day.get_attribute(\"data-day\")\n\n            events = day.find_elements(By.CSS_SELECTOR, \"li[data-region='event-item']\")\n            for event in events:\n                event_name = event.find_element(By.CLASS_NAME, \"eventname\").text\n                deadlines.append(f\"{date} November 2024: {event_name}\")\n\n        print(\"All deadlines this month:\")\n        for deadline in deadlines:\n            print(deadline)\n\n    except TimeoutException:\n        print(\"Unable to find events in the calendar. Please check page load speed or selector accuracy.\")\n",
        "description": "Retrieve deadlines from the HKU Moodle calendar."
    }
}
